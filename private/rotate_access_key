#!/usr/bin/env sh

function rac_usage() {
  cat << HELP_USAGE
This method accepts a user name on AWS, rotates their access token, and performs a callback function with the new access token.

If the user has no access tokens currently, a new token will be created for them.
If the user has one access token currently, the new token will be created along side it first and the old one will be removed after the callback function completes.
If the user has two access tokens, one of the existing tokens will be removed and rotated, while the other one will stay untouched (by default).

rac_usage: rotate [-kdhv] [-p profile] [-u username] [-c callback]

-k           if there was previously one token, keep old access token
-d           destroy all old access tokens (even if -k was passed)
-n           if there are two existing tokens, remove the newer one instead of the older one
-v           verbose
-h           show this help message
-p profile   the profile to use for this operation, needs to have permissions to list, create and destroy access tokens for the target user.
-u username  the username of the user to rotate the keys for
-c callback  callback function to run with the new access token credentials
HELP_USAGE
}

function rac_print() {
  if [[ $verbose == 1 ]]; then 
    echo $@
  fi
}

rac_echoerr() { echo "$@" 1>&2; }

function rac_run_iam_command() {
  command=$1
  shift
  aws iam $command --profile $profile --user $username $@
}

function rac_set_preferences() {
  keep_old_token=0
  destroy_old_tokens=0
  remove_newer=0
  verbose=0

  # handle options  
  while getopts "kdvsnhp:u:c:" flag; do
    case $flag in
      k) keep_old_token=1;;
      d) destroy_old_tokens=1;;
      v) verbose=1;;
      n) remove_newer=1;;
      h) rac_usage; exit 0;;
      p) profile=$OPTARG;;
      u) username=$OPTARG;;
      c) callback=$OPTARG;;
      ?) echo "unknown flag ignored: $flag";;
    esac
  done

  rac_print "Profile: $profile"
  if [[ -z $profile ]]; then
    rac_echoerr "Error: AWS profile required"
    exit 1
  fi

  rac_print "Username: $username"
  if [[ -z $username ]]; then
    rac_echoerr "Error: AWS username required"
    rac_usage
    exit 1
  fi
}

function rac_remove_existing_token() {
  local access_key_id="$1"

  rac_print "Removing key with ID $access_key_id..."

  rac_run_iam_command delete-access-key --access-key-id "$access_key_id"

  rac_print "Key with ID $access_key_id removed successfully."
}

function rac_create_and_run_callback() {
  rac_print "Creating new key..."
  new_credentials=$(rac_run_iam_command create-access-key)
  rac_print "Running callback function with new access key..."

  if [[ -z $callback ]]; then
    rac_print "Callback not passed, printing out credentials instead."
    rac_print "$new_credentials"
  else
    $callback "$new_credentials"
  fi
}

function rac_rotate_single_key() {
  local existing_token_access_id_key="$1"
  local destroy_existing=${2:-$((1-keep_old_token))}

  rac_create_and_run_callback

  if [[ $destroy_existing == 1 ]]; then
    rac_print "Removing existing token..."
    rac_remove_existing_token "$existing_token_access_id_key"
  fi
}

function rac_remove_key_and_rotate() {
  local keys="$1"

  newer=$(echo $keys | jq '. | last | .AccessKeyId' -r)
  older=$(echo $keys | jq '. | first | .AccessKeyId' -r)

  if [[ "$remove_newer" == 1 ]]; then
    rac_remove_existing_token "$newer" 
    rac_rotate_single_key "$older" $destroy_old_tokens
  else

    rac_remove_existing_token "$older" 
    rac_rotate_single_key "$newer" $destroy_old_tokens
  fi
}
