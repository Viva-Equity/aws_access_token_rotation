#!/usr/bin/env sh

function usage() {
  cat << HELP_USAGE
This method accepts a user name on AWS, rotates their access token, and performs a callback function with the new access token.

If the user has one access token currently, the new token will be created along side it first and the old one will be removed after the callback function completes.
If the user has two access tokens, one of the existing tokens will be removed and rotated, while the other one will stay untouched (by default).

usage: rotate [-kdhvs] [-p profile] [-u username] [-c callback]

-k           if there was previously one token, keep old access token
-d           destroy all old access tokens
-n           if there are two existing tokens, remove the newer one instead of the older one
-v           verbose
-s           print to the console the new access token credentials
-h           show this help message
-p profile   the profile to use for this operation, needs to have permissions to list, create and destroy access tokens for the target user.
-u username  the username of the user to rotate the keys for
-c callback  callback function to run with the new access token credentials
HELP_USAGE
}

function print() {
  if [[ "$verbose" == true ]]; then 
    echo $@
  fi
}

echoerr() { echo "$@" 1>&2; }

function run_iam_command() {
  command=$1
  shift
  aws iam $command --profile $profile --user $username $@
}

function rotate() {
  local keep_old_token=false
  local destroy_old_tokens=false
  local verbose=false
  local show_credentials=false
  local remove_newer=false

  # handle options  
  while getopts "kdvsnhp:u:c:" flag; do
    case $flag in
      k) keep_old_token=true;;
      d) destroy_old_tokens=true;;
      v) verbose=true;;
      s) show_credentials=true;;
      n) remove_newer=true;;
      h) usage; exit 0;;
      p) profile=$OPTARG;;
      u) username=$OPTARG;;
      c) callback=$OPTARG;;
      ?) echo "unknown flag ignored: $flag";;
    esac
  done

  print "Running in verbose mode"

  print "Profile: $profile"
  if [[ -z $profile ]]; then
    echoerr "Error: AWS profile required"
    exit 1
  fi

  print "Username: $username"
  if [[ -z $username ]]; then
    echoerr "Error: AWS username required"
    usage
    exit 1
  fi

  print "Fetching existing access tokens..."
  keys=$(run_iam_command list-access-keys | jq '.AccessKeyMetadata')
  key_length=$(echo $keys | jq '. | length')
  print "Found $key_length keys."

  case $key_length in
    0) handleNoExisingKeys;;
    1) handleOneExistingKey;;
    2) handleTwoExistingKeys;;
    *)
      echoerr "Unexpected amount of existing tokens: $key_length. exiting..."
      echoerr "Keys found: $keys"
      exit 0
      ;;
  esac
}

function handleOneExistingKey() {
  print "Creating new key..."
  new_credentials=$(run_iam_command create-access-key)
  echo $new_credentials
}

function handleTwoExistingKeys() {
  sorted_by_date=$(echo $keys | jq '. | sort_by(.CreateDate)')
  if [[ $remove_newer ]]; then
    to_remove=$(echo $sorted_by_date | jq '. | last | .AccessKeyId' -r)
    print "Removing newer key with ID $to_remove..."
  else
    to_remove=$(echo $sorted_by_date | jq '. | first | .AccessKeyId' -r)
    print "Removing older key with ID $to_remove..."
  fi

  run_iam_command delete-access-key --access-key-id $to_remove
}

rotate "$@"
